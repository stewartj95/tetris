package view.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;

import javax.swing.JLabel;
import javax.swing.JPanel;

import model.Cell;
import model.ShapeModel;
import model.ShapeModel.Tetrominoes;
import model.ShapeModel.Type;


// This class displays the tetromino that will be generated next.

public class ShapeView extends JPanel {
	private Cell[][] grid;
	private ShapeModel shape;
	private Tetrominoes tetromino;
	private ShapeCanvas shapeCanvas;

	private int x, y, row, column;

	private JLabel titleLbl;

	public ShapeView(int width, int height, String titleLblText) {
		setLayout(new GridLayout(2,0));

		// Initialise 4x4 grid 
		grid = new Cell[4][4];
		for(int row=0; row<4; row++) {
			for(int column=0; column<4; column++) {
				grid[row][column] = new Cell(Cell.EMPTY);
			}
		}
		
		// Initialise current shape
		tetromino = Tetrominoes.NOSHAPE;
		shape = new ShapeModel(Type.CURRENT_SHAPE);
		shape.setMaxColumns(4);
		
		shapeCanvas = new ShapeCanvas(width, height);
		shapeCanvas.setPreferredSize(new Dimension(width,height));
		
		// Initialise and add title
		titleLbl = new JLabel(titleLblText);
		add(titleLbl);
		add(shapeCanvas);
	}
	
	/**
	 * Shows the next tetromino piece which will be generated by the 
	 * shape model.
	 * @param tetromino  Next tetromino piece to show in panel.
	 */
	public void setShape(Tetrominoes tetromino) {
		for (int row = 0; row < 4; row++) {
			for (int column = 0; column < 4; column++) {
				grid[row][column].setState(Cell.EMPTY);
				grid[row][column].setFillColor(null);
			}
		}
		this.tetromino = tetromino;
		if(shape.getCurrentShape() != tetromino && tetromino != Tetrominoes.NOSHAPE) {
			shape.newShape(tetromino);
			
			int[][] coordinates = shape.getCoordinates();
			
			for (int block = 0; block < 4; block++) {
				column = 2 + coordinates[block][0];
				row = 1 + coordinates[block][1];
				grid[row][column].setState(Cell.NOT_EMPTY);
				grid[row][column].setFillColor(shape.getFillColor());
				grid[row][column].setOutlineColor(shape.getOutlineColor());
			}
			
			shapeCanvas.repaint();
		}
		
		if(tetromino == Tetrominoes.NOSHAPE)
			shapeCanvas.repaint();
	}
	
	public Tetrominoes getShape() {
		return tetromino;
	}
	
		
	class ShapeCanvas extends JPanel {
	private int panelWidth, panelHeight, shapeWidth, shapeHeight;
		
		public ShapeCanvas(int width, int height) {
			setPanelSize(width, height);
		}
		
		public void setPanelSize(int width, int height) {
			panelWidth = width;
			panelHeight = height;
			shapeWidth = panelWidth/4;
			shapeHeight = panelHeight/4;
			System.out.println("Width: " + width);
			System.out.println("Height: " + height);
			setSize(width, height);
		}
		
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			for (int row = 0; row < 4; row++) {
				for (int column = 0; column < 4; column++) {
					if(grid[row][column].getState() != Cell.EMPTY) {
						x = column * shapeWidth;
						y = row * shapeHeight;
						g.setColor(grid[row][column].getFillColor());
						g.fillRect(x, y, shapeWidth, shapeHeight);
//						g.setColor(grid[row][column].getOutlineColor());
//						g.drawRect(x, y, shapeWidth, shapeHeight);
					}
				}
			}
		}

	}
	
}