package view.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

import javax.swing.JLabel;
import javax.swing.JPanel;

import model.Cell;
import model.ShapeModel;
import model.ShapeModel.Tetrominoes;
import model.ShapeModel.Type;


// This class displays the tetromino that will be generated next.

public class NextShapeView extends JPanel {
	private ShapeModel shape;
	private Tetrominoes tetromino;
	private int panelWidth, panelHeight, shapeWidth, shapeHeight, x, y, row, column;
	private Cell[][] grid;

	public NextShapeView() {
		grid = new Cell[6][6];
		for(int row=0; row<6; row++) {
			for(int column=0; column<6; column++) {
				grid[row][column] = new Cell(Cell.EMPTY);
			}
		}
		tetromino = Tetrominoes.NOSHAPE;
		shape = new ShapeModel(Type.CURRENT_SHAPE);
		shape.setMaxColumns(4);
	}
	
	public void setWidth(int width) {
		shapeWidth = width/6;
		panelWidth = width;
	}

	public void setHeight(int height) {
		shapeHeight = height/6;
		panelHeight = height;
	}
	
	public int getWidth() {
		return panelWidth;
	}
	
	public int getHeight() {
		return panelHeight;
	}
	
	/**
	 * Shows the next tetromino piece which will be generated by the 
	 * shape model.
	 * @param tetromino  Next tetromino piece to show in panel.
	 */
	public void setNextShape(Tetrominoes tetromino) {
		for (int row = 0; row < 6; row++) {
			for (int column = 0; column < 6; column++) {
				grid[row][column].setState(Cell.EMPTY);
				grid[row][column].setColor(null);
			}
		}
		this.tetromino = tetromino;
		if(shape.getShape() != tetromino) {
			shape.newShape(tetromino);
			
			int[][] coordinates = shape.getCoordinates();
			
			for (int block = 0; block < 4; block++) {
				column = 2 + coordinates[block][0];
				row = 1 + coordinates[block][1];
				grid[row][column].setState(Cell.NOT_EMPTY);
				grid[row][column].setColor(shape.getColor());
			}
			
			repaint();
		}
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		for (int row = 0; row < 6; row++) {
			for (int column = 0; column < 6; column++) {
				if(grid[row][column].getState() != Cell.EMPTY) {
					x = column * shapeWidth;
					y = row * shapeHeight;
					g.setColor(grid[row][column].getColor());
					g.fillRect(x, y, shapeWidth, shapeHeight);
					g.setColor(Color.BLACK);
					g.drawRect(x, y, shapeWidth, shapeHeight);
				}
			}
		}
	}
	
}
